#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

int linear_search(int arr[], int n, int key, int *count) {
    *count = 0;
    int i;
    for ( i = 0; i < n; i++) {
        (*count)++;
        if (arr[i] == key) {
            return i;
        }
    }
    return -1;
}

void generateRandomArray(int arr[], int n, int max_val) {
     int i;
     for ( i = 0; i < n; i++) {
        arr[i] = rand() % max_val;
    }
}

int main() {
    srand(time(NULL));
    int sizes[] = {1000, 2000, 5000, 10000, 20000, 50000, 100000};
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]);
    int i;

    printf("Size\tComparisons\tTime(ms)\tlog(n)/count\tn/count\tn^2/count\n");
    printf("--------------------------------------------------------------\n");

    for (i = 0; i < num_sizes; i++) {
        int n = sizes[i];
        int *arr = (int *)malloc(n * sizeof(int));
        if (arr == NULL) {
            printf("Memory allocation failed!\n");
            return 1;
        }

        generateRandomArray(arr, n, 1000000);

        int key = 1000001;
        int count;

        clock_t start = clock();
        linear_search(arr, n, key, &count);
        clock_t end = clock();

        double time_taken = ((double)(end - start) * 1000) / CLOCKS_PER_SEC;
        double log_n = log(n);
        double log_n_count = (count > 0) ? log_n / count : 0;
        double n_count = (count > 0) ? (double)n / count : 0;
        double n_squared_count = (count > 0) ? ((double)n * n) / count : 0;

        printf("%d\t%d\t\t%.2f\t%.5f\t%.5f\t%.5f\n", n, count, time_taken, log_n_count, n_count, n_squared_count);

        free(arr);
    }

    return 0;
}


